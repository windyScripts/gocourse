package main

import (
	"fmt"
	"regexp"
)

func main(){
// regexp.compile and mustCompile
// backslash starts an escape sequence. Merging characters into one character.
fmt.Println("He said, \"I am great\"")

// compile a regex pattern to match email address
re := regexp.MustCompile(`[a-zA-Z0-9._+%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}`) // for acceptable character use of hyphen, we need to put - at the end or it signals a range in square brackets.

// test strings:
email1 := "user@email.com"
email2 := "invalid_email"

// Match
fmt.Println("Email1:", re.MatchString(email1));
fmt.Println("Email2:", re.MatchString(email2));

// Capturing Groups
// Compile a regex pattern to capture date components
re = regexp.MustCompile(`(\d{4})-(\d{2})-(\d{2})`)

date := "2024-07-30"

//find all submatches
submatches := re.FindStringSubmatch(date)
fmt.Println(submatches)

// Target string
str := "Hello World"

re = regexp.MustCompile(`[aeiou]`)

result := re.ReplaceAllString(str, "*")
fmt.Println(result)

re = regexp.MustCompile(`(?i)go`) // flags start with a question mark. Here i makes case insensitive.

text := "Golang is great!"

//Match
fmt.Println("Match:", re.MatchString(text))
}

// i - case insensitive
// m - multiline model
// s - dot matches all


// templates are part of
// text package and html package

package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
	"text/template"
)

// applied to template data structures.
func main() {
	//tmpl := template.New("example")
	//tmpl, err := tmpl.Parse("Welcome, {{.name}}! How are you doing?")
	//tmpl, err := template.New("example").Parse("Welcome, {{.name}}! How are you doing?\n")
	// if err != nil {
	// 	panic(err)
	// }
	tmpl := template.Must(template.New("example").Parse("Welcome, {{.name}}! How are you doing?\n"))
	// automatically panics if there is an issue.

	// Define data for the welcome message template:

	data := map[string]interface{} {
		"name":"John",
	}

	err1 := tmpl.Execute(os.Stdout, data)
	if err1 != nil {
		panic(err1)
	}

	// bufio is buffered input output package.
	// we use it here to get input.

	reader := bufio.NewReader(os.Stdin)
	fmt.Println("Enter your name")
	name, _ := reader.ReadString('\n')
	name = strings.TrimSpace(name)

	// Define named templates for different types of 
	templates := map[string]string {
"welcome": "Welcome, {{.name}}! We are glad you joined.",
"notification": "{{.name}}, you have a new notification: {{.notification}}",
"error":"Oops! An error occurred: {{.errorMessage}}",	
}

parsedTemplates := make(map[string]*template.Template)
for name, tmpl := range templates {
	parsedTemplates[name] = template.Must(template.New(name).Parse(tmpl))
}

for {
	fmt.Println("\nMenu:")
	fmt.Println("1. Join")
	fmt.Println("2. Get Notification")
	fmt.Println("3. Get Error")
	fmt.Println("4. Exit")
	fmt.Println("Choose an option.")
	choice, _ := reader.ReadString('\n')
	choice = strings.TrimSpace(choice)

	var data map[string]interface{}
	var tmpl *template.Template

	switch choice {
	case "1":
		tmpl = parsedTemplates["welcome"]
		data = map[string]interface{}{
			"name": name,
		}
	case "2":
		fmt.Println("Enter your notification message: ")
		notification, _ := reader.ReadString('\n')
		notification = strings.TrimSpace(notification)
		tmpl = parsedTemplates["notification"]
		data = map[string]interface{} {"name": name, "notification": notification }
	case "3":
		fmt.Println(("Enter your error message: "))
		errorMessage, _ := reader.ReadString('\n')
		errorMessage = strings.TrimSpace(errorMessage)
		tmpl = parsedTemplates["error"]
		data = map[string]interface{} {"name": name, "errorMessage": errorMessage }
	case "4":
		fmt.Println("Exiting...")
		return
	default:
		fmt.Println("Invalid choice. Please select a valid option.")
		continue
	}

	// render and print the template to the console.

	err := tmpl.Execute(os.Stdout, data)
	if err != nil {
		fmt.Println("Error executing template: ", err)
	}

}

}
package main

import (
	"errors"
	"fmt"
	"math"
)

func sqrt(x float64)(float64, error){
	if x < 0 {
		return 0, errors.New("Math: square root of negative number")
	}
	return math.Sqrt(x), nil
}

func process(data []byte) error {
	if len(data) == 0 {
		return errors.New("Error: Empty data")

	}
	return nil
}

func main() {
// result, err :=sqrt(16)
// if err !=nil{
//  fmt.Println("Error")
//  return
// }
// fmt.Println(result)

// result1, err1 :=sqrt(-1)
// if err1 !=nil{
//  fmt.Println("Error")
//  return
// }
// fmt.Println(result1)

// data := []byte{}
// //if err:= process(data);err!=nil{
// err := process(data)
// if err!= nil {
// 	fmt.Println("error",err)
// 	return
// }
// fmt.Println("Data processed successfully.")

// ... error interface of built in package.
// err1 := eProcess()
// if err1!= nil {
// 	fmt.Println("error",err)
// 	return
// }

err := readData();
if err!= nil {
	fmt.Println(err)
	return
}
fmt.Println("Data read successfully")

}

type myError struct {
	message string
}

func (m *myError) Error() string {
	return fmt.Sprintf("Error: %s",m.message)
} 

func eProcess() error{
	return &myError{"Custom error message"}
}

func readConfig() error {
	return errors.New("config error")
}

func readData() error {
	err := readConfig()
	if(err != nil){
		return fmt.Errorf("readData: %w",err)
	}
	return nil
}